#include <stdio.h>
#include <stdlib.h>

#define MAX 100

// Stack implementation
typedef struct Stack {
    int arr[MAX];
    int top;
} Stack;

// Function to initialize the stack
void initStack(Stack *stack) {
    stack->top = -1;
}

// Function to check if the stack is empty
int isEmpty(Stack *stack) {
    return stack->top == -1;
}

// Function to push an element to the stack
void push(Stack *stack, int value) {
    if (stack->top == MAX - 1) {
        printf("Stack overflow\n");
        return;
    }
    stack->arr[++stack->top] = value;
}

// Function to pop an element from the stack
int pop(Stack *stack) {
    if (isEmpty(stack)) {
        printf("Stack underflow\n");
        return -1;
    }
    return stack->arr[stack->top--];
}

// Function to get the top element of the stack
int top(Stack *stack) {
    if (isEmpty(stack)) {
        return -1;
    }
    return stack->arr[stack->top];
}

// Function to find the next greater element
void findNextGreater(int arr[], int n) {
    Stack stack;
    initStack(&stack);
    int result[n];

    // Initialize result array with -1
    for (int i = 0; i < n; i++) {
        result[i] = -1;
    }

    for (int i = 0; i < n; i++) {
        // While the stack is not empty and the current element is greater than the top element of the stack
        while (!isEmpty(&stack) && arr[i] > arr[top(&stack)]) {
            result[pop(&stack)] = arr[i];
        }
        // Push the current index onto the stack
        push(&stack, i);
    }

    // Print the result
    printf("Next Greater Elements:\n");
    for (int i = 0; i < n; i++) {
        printf("%d -> %d\n", arr[i], result[i]);
    }
}

int main() {
    int n;
    printf("Enter the number of elements: ");
    scanf("%d", &n);

    int arr[n];
    printf("Enter the elements of the array:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    findNextGreater(arr, n);

    return 0;
}
